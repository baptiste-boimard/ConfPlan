// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Service.OAuth.Database;

#nullable disable

namespace ConfPlan.Api.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    [Migration("20250715172257_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConfPlan.Shared.Conference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdRoom")
                        .HasColumnType("uuid");

                    b.Property<string>("SpeakerBio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpeakerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpeakerPhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdRoom")
                        .IsUnique();

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("ConfPlan.Shared.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("75115e60-39ed-43de-ab04-b0de37753703"),
                            RoleName = "Visiteur"
                        },
                        new
                        {
                            Id = new Guid("bcc28637-ab86-4d36-a872-4cefebbc9691"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("ed3f8988-a5cf-4e5e-925e-238dc90ec0eb"),
                            RoleName = "Sponsor"
                        });
                });

            modelBuilder.Entity("ConfPlan.Shared.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentCapacity")
                        .HasColumnType("integer");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("02ad0587-9a12-40f9-950e-cfbf9fca42ef"),
                            CurrentCapacity = 0,
                            MaxCapacity = 20,
                            Name = "Salle A"
                        },
                        new
                        {
                            Id = new Guid("7677d878-0bb4-4606-a641-80b29877ff95"),
                            CurrentCapacity = 0,
                            MaxCapacity = 20,
                            Name = "Salle B"
                        },
                        new
                        {
                            Id = new Guid("60ca597c-72d0-4454-bc69-1df6c1e0242a"),
                            CurrentCapacity = 0,
                            MaxCapacity = 10,
                            Name = "Salle C"
                        },
                        new
                        {
                            Id = new Guid("3953e1fd-af4d-4b97-8ab3-f64fea2eae04"),
                            CurrentCapacity = 0,
                            MaxCapacity = 10,
                            Name = "Salle D"
                        },
                        new
                        {
                            Id = new Guid("7bf76c10-5763-4935-9607-52c67982579a"),
                            CurrentCapacity = 0,
                            MaxCapacity = 5,
                            Name = "Salle E"
                        },
                        new
                        {
                            Id = new Guid("9ac9f4c2-893a-45e6-84a1-80249ed16d9a"),
                            CurrentCapacity = 0,
                            MaxCapacity = 5,
                            Name = "Salle F"
                        },
                        new
                        {
                            Id = new Guid("96625fba-b7cf-4a3f-bf6e-07aa490370c4"),
                            CurrentCapacity = 0,
                            MaxCapacity = 50,
                            Name = "Salle G"
                        },
                        new
                        {
                            Id = new Guid("51211ce8-67e9-496b-9add-2e4875c7962a"),
                            CurrentCapacity = 0,
                            MaxCapacity = 50,
                            Name = "Salle H"
                        },
                        new
                        {
                            Id = new Guid("d3ef5b18-5934-4567-88b9-2407537025a1"),
                            CurrentCapacity = 0,
                            MaxCapacity = 100,
                            Name = "Salle I"
                        },
                        new
                        {
                            Id = new Guid("70e5043b-3ed4-4fd5-8473-86bd407170c0"),
                            CurrentCapacity = 0,
                            MaxCapacity = 100,
                            Name = "Salle J"
                        });
                });

            modelBuilder.Entity("ConfPlan.Shared.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdRole")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdRole");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f89c3a97-e6b1-4f51-a674-c3cf1862ad7c"),
                            Email = "admin@confplan.dev",
                            IdRole = new Guid("bcc28637-ab86-4d36-a872-4cefebbc9691"),
                            Password = "$2a$12$ytsbB3JQWKgtrDjAFVJm3eASfxMqBqE8JlYDXBzkPbwt28oFP9unq"
                        });
                });

            modelBuilder.Entity("ConfPlan.Shared.Conference", b =>
                {
                    b.HasOne("ConfPlan.Shared.Room", "Room")
                        .WithOne("Conference")
                        .HasForeignKey("ConfPlan.Shared.Conference", "IdRoom")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ConfPlan.Shared.User", b =>
                {
                    b.HasOne("ConfPlan.Shared.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ConfPlan.Shared.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ConfPlan.Shared.Room", b =>
                {
                    b.Navigation("Conference");
                });
#pragma warning restore 612, 618
        }
    }
}
