// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Service.OAuth.Database;

#nullable disable

namespace ConfPlan.Api.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    [Migration("20250715190151_AddSpeakerTable")]
    partial class AddSpeakerTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConfPlan.Shared.Conference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdRoom")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdSpeaker")
                        .HasColumnType("uuid");

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdRoom")
                        .IsUnique();

                    b.HasIndex("IdSpeaker")
                        .IsUnique();

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("ConfPlan.Shared.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b63e1ea1-ef8d-4be1-8115-ec5f169bc564"),
                            RoleName = "Visiteur"
                        },
                        new
                        {
                            Id = new Guid("ef3ec6e3-4f8f-4cb9-a07b-084d84a98b7d"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("5d98fc72-464d-42fd-9652-0c56aecc4bf9"),
                            RoleName = "Sponsor"
                        });
                });

            modelBuilder.Entity("ConfPlan.Shared.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentCapacity")
                        .HasColumnType("integer");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30a0f0d5-ebab-4847-8add-e49ec415627e"),
                            CurrentCapacity = 0,
                            MaxCapacity = 20,
                            Name = "Salle A"
                        },
                        new
                        {
                            Id = new Guid("1a711493-a769-4fe4-a953-ce1bc38ae73e"),
                            CurrentCapacity = 0,
                            MaxCapacity = 20,
                            Name = "Salle B"
                        },
                        new
                        {
                            Id = new Guid("35964b1d-05b9-4b96-ae3a-1e06d4b13faa"),
                            CurrentCapacity = 0,
                            MaxCapacity = 10,
                            Name = "Salle C"
                        },
                        new
                        {
                            Id = new Guid("18771ff6-267d-4226-bb47-ad63d69153e4"),
                            CurrentCapacity = 0,
                            MaxCapacity = 10,
                            Name = "Salle D"
                        },
                        new
                        {
                            Id = new Guid("503ade23-dcef-4a22-b1b7-abce20a69ae5"),
                            CurrentCapacity = 0,
                            MaxCapacity = 5,
                            Name = "Salle E"
                        },
                        new
                        {
                            Id = new Guid("f8d55469-8bfa-4a9f-b6f5-03067c22633b"),
                            CurrentCapacity = 0,
                            MaxCapacity = 5,
                            Name = "Salle F"
                        },
                        new
                        {
                            Id = new Guid("f003f018-d373-4b00-9b57-774142f23def"),
                            CurrentCapacity = 0,
                            MaxCapacity = 50,
                            Name = "Salle G"
                        },
                        new
                        {
                            Id = new Guid("f6f7e235-95e9-420b-81bc-9eafe69e7089"),
                            CurrentCapacity = 0,
                            MaxCapacity = 50,
                            Name = "Salle H"
                        },
                        new
                        {
                            Id = new Guid("0a8fa030-8303-4e44-8ac6-638b91562d2e"),
                            CurrentCapacity = 0,
                            MaxCapacity = 100,
                            Name = "Salle I"
                        },
                        new
                        {
                            Id = new Guid("0e96e35e-ecbc-4d0a-9a9f-aa98f0c8b1d0"),
                            CurrentCapacity = 0,
                            MaxCapacity = 100,
                            Name = "Salle J"
                        });
                });

            modelBuilder.Entity("ConfPlan.Shared.Speaker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Speakers");
                });

            modelBuilder.Entity("ConfPlan.Shared.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdRole")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdRole");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d75f3945-c050-460b-8c3c-2c82ee40ae6f"),
                            Email = "admin@confplan.dev",
                            IdRole = new Guid("ef3ec6e3-4f8f-4cb9-a07b-084d84a98b7d"),
                            Password = "$2a$12$ytsbB3JQWKgtrDjAFVJm3eASfxMqBqE8JlYDXBzkPbwt28oFP9unq"
                        });
                });

            modelBuilder.Entity("ConfPlan.Shared.Conference", b =>
                {
                    b.HasOne("ConfPlan.Shared.Room", "Room")
                        .WithOne("Conference")
                        .HasForeignKey("ConfPlan.Shared.Conference", "IdRoom")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConfPlan.Shared.Speaker", "Speaker")
                        .WithOne("Conference")
                        .HasForeignKey("ConfPlan.Shared.Conference", "IdSpeaker")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("ConfPlan.Shared.User", b =>
                {
                    b.HasOne("ConfPlan.Shared.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ConfPlan.Shared.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ConfPlan.Shared.Room", b =>
                {
                    b.Navigation("Conference");
                });

            modelBuilder.Entity("ConfPlan.Shared.Speaker", b =>
                {
                    b.Navigation("Conference");
                });
#pragma warning restore 612, 618
        }
    }
}
